shebang: #!/usr/bin/env python3

#STRINGS

var1 = 'string'
var2 = "string"
var3 = """ string """ #must have space
var4 = ''' string ''' #must have space

#DATA TYPES

bool(False) #checks if whats inside is true/false
var1 = 1
bool(var1) #returns true


var1 = 1
type(var1) #return type integer


str(var1) # prints '1'


id(var1) #id of object. var1 = 1   1 is the object


#LISTS -1 for last

var_l = ['String', 4, 7.2, True]

type(var_l[0]) #type of string
type(var_l[-2]) #second from last is float


var_l.append(False) #append False to end


del var_l[0] #remove


id will not change for lists


#TUPLES

#more like an array
var_t = ('string', 4, True)


#FORMATTING

print('a: {} b: {}'.format(a,b)) # a: 5 b: 8


#SPLIT and JOIN
takes string, turns into list. default separator is whitespace

'Hello world'.split() # breaks apart by whitespace(spaces, newlines..) ['Hello', 'world'] 

l = "192.168.1.1"
l.split('.') # ['192', '168', '1', '1']


'.'.join(l) #192.168.1.1

#strings are immutable. change into list to change
s = 'hello'
list(s) #['h', 'e', 'l', 'l', 'o']
''.join(s) #makes s make into 'hello'
#PRINT

a = 'hello'
b = 'world'
print(a, b) #hello world        , adds space

print(a, b, sep=':') #hello:world


#IF

if condition:

elif condition:

else:


#FUNCTIONS

def multiply(a, b):
    return a * b

multiply(var1, var2)


#WHILE LOOPS

while False:
    print("wont print")


l = [1,2,3,4,5]
index = 0
while index < len(1):
    l[index] = l[index]**2
    index += 1
# break, continue

#FOR LOOPS

for i in l:
    instructions

for i in range(10):
    print(i) #0 1 2 3 4 5 6 7 8 9

#RANGE

range(10) # up to but not including 10

range(1,10) # 1 to up to but not including 10

range(1,10,2) #every other from 1 to 9      1 3 5 7 9


#SLICING

l = [1,2,3,4,5]
l[0:-1] #1 2 3 4

l[0:-1:2] # 1 3    every other

l[::2] # 1, 3, 5

#copying list

l2 = l[:] #copy of all of l


l[::-1] # 5, 4, 3, 2, 1




#BINARY OPS

ord(x) #character (x) to ascii number
format(x, '0>8b') #integer (x) to 8 bit binary
int(x, 2) #binary to int





w = 'jello'
[c for c in w if c== 'l'] # ['l', 'l']



#FILE IO: READ

fp = open('/etc/passwd') #read from /etc/passwd (mode argument is read by default)

fp.read() #output the file. remembers where it left off
fp.read() #outputs nothing because its at the end. must close and reopen to do again

fp.close()
fp = open('/etc/passwd')
contents = fp.read()

fp.close()
fp = open('/etc/passwd')
contents = fp.readlines() # LIST (array) of all lines of file

fp.close()
fp.open('/etc/passwd')
contents = fp.readline() #line by line of file one at a time. remembers where left off

fp.close()
fp = open('/etc/passwd')
for line in fp:
    print(line) #same as readline but better

#FILE IO: WRITE - can only write strings not integers

fp = open('test2.txt', 'w') #write mode. File created if not there
fp.close() 

fp = open('test2.txt', 'w')
fp.write('this is some text') #does not include \n. appends to end of file 
fp.close()


#CONTEXT MANAGER
#entry into and exit from file automatically

with open('test.txt') as f:
    for line in f:
        print(line)

f.closed #returns true because the context manager automatically closed it


#IMPORT

import random #import all under same namespace

from random import randint #just import part

from random import randint, choice #just import choice function from randint


#DATA STRUCTURES


#sets cannot have duplicate elements

s = {1,2,3,4,5}
t = { 4,5,6,7,8 }
1 in s # check if 1 is in s. returns True
9 in s #returns False


s.union(t) # join two {1,2,3,4,5,6,7,8} no same

s.difference(t) # {1,2,3}

s.intersection(t) #{4,5}


#remove duplicates from list
l = [1,1,2,2,3,3,4,4]
s = set(l) #s = {1,2,3,4}


#dictionaries

d = { 'I':1, 'V':5, 'X':10, 'L':50 }
d['I'] #1

d['Y'] = 23 #adds this value to dictionary



for i in d: #gets keys

d.keys() # list of keys

for i in d.values(): #get values

for i in d.items(): #return tuple of key, value
































############EXCERSISES##########

#email split
'.'.join(email.split('@')).split('.')








Create a dictionary, freq, that displays each character in string str1 as the key and its frequency as the value.

str1 = "peter piper picked a peck of pickled peppers"
freq = {}

for char in str1:
    freq[char] = freq.get(char,0) + 1








