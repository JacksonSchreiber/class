Set-ExecutionPolicy -scope CurrentUser Unrestricted

get-help *log* #finds all help with log in it

get-service -name ajrouter

Get-ChildItem -path C:\Windows -Filter *.exe -Recurse -name



#update help system
update-help

#ALIASES

$alias:dir #finds aliases for dir command

gal | ?{_.Definition -eq "Get-ChildItem"}   #gal is an alias to list all aliases. find alias with Get-ChildItem in it

set-alias edit notepad.exe  #set edit to notepad.exe
del alias:edit  #remove alias


#ARRAY

$array = "gal", "dir"
$array | ForEach-Object{Get-Alias $_}   


#VARIABLES

$total = 150
$diff = 0.25
$result = $total * $diff
$result #display answer

$text = "$result is {0:0%} of $total" -f $diff  #store result is 25% of 150. -f is format option
$x = $y = $z = 10
$var1, $var2 = 50, 100 #assigned respectively


$var1 = "Jon"
Write-Host "hello $var+"

Get-ChildItem variable:x    #show value of x

("hello").GetType()     #string


#TYPECASTING
$var = Read-Host; [int32]$var


#ARRAYS

$x = Get-Process
$x[0]   #0th element

$x.count    #num of elements in array

$x[1..4]    #1 through 4 elements

$array2 = "word", 1, 2.3, (get-help)    #lots of data types

$array3 = @()   #empty array

$x[-1]  #call last element in array
$x[$x.count-1]  #same, .length also works


(-4..10)[4] #5th element of array without creating a new array
(-4..10)[4, -1]     #5th and last element


#JAGGED ARRAYS

$jagarray = "joe", "jim", "jan", (1, ("apple", "pear"), 3), "jay"
$jagarray[3][1][0]  #apple

$a = 1,2,3
$a += @(4..6)   #add 4, 5, 6 to end
$a += , @(7..9) #add 7, 8, 9 as a separate array to end

$a[-1] #7, 8, 9
$a[-1][1]   #8


#HASH TABLES

$mylist = @{First = "John"; Last = "Doe"; Mid = "Bon"; Age = 35}

$mylist["Last"]     #Doe
$mylist.last    #same

$mylist["First","Last", "Mid"]


$mylist.keys    #returns First Last Mid Age
$mylist.values  #John Doe Bon 35


$mylist["location"] = "Germany"     #adds location key to hash table
$mylist.remove("location")


#PIPES

Get-Service | Format-List *
Get-Service | Format-Table Name, Status

$_  #current object in the pipeline


#WRITE-HOST WRITE-OUTPUT

Write-Host  #writes to console
Write-Output    #can be redirected. used in pipes



#CREATE OBJECT


$compinfo = Get-WmiObject Win32_ComputerSystem
$osinfo = Get-WmiObject Win32-OperatingSystem
$myobject2 = New-Object -TypeName psobject


$myobject2 | Add-Member -MemberType NoteProperty -name ComputerName -value $compinfo.name
$myobject2 | Add-Member -MemberType NoteProperty -Name OperatingSystem -Value $osinfo.Caption

$myobject2

#COMPARISON OPERATORS

-eq #case insensitive
-ceq #case sensitive
-ne #not equals
7, 8, 9 -gt 8   #outputs 9

    #-like or -notlike
"PowerShell" -like "*shell" #true
"PowerShell", "Server" -like "*shell"   #Powershell


$text = 'Here is the model number: MO5264'
$pattern = 'MO(\d{3})'
$text -match $pattern   #see if text matches pattern (regex)
$matches[1] #536


$num = 5
(($num -gt 1) -and ($num -lt 10))   #true

Get-Process | Where-Object {$_.Company -like 'micro*'}  #processes with company names beginning with micro


#IF STATEMENTS

$x = 5 
If ($x -eq 5){
    Write-Host "Condition is true - x is equal to 5"
}
elseif ($x -eq 4) {
    "dsadsadS"
}
else {
    "dasdsad"
}

#SWITCH STATEMENT
#keeps going through even if condition is met

switch(10) {    test value
    1 {"one"}
    2 {"two"}
    10 {"ten"}
    default {"none"}

}

#FOREACH-OBJECT

#   % is foreach-object alias

$list = 'a', 'b', 'c', 'd'
$list | ForEach-Object{$_.ToUpper()}    change all to uppercase


#FOREACH

#iterate through

ForEach(variable in expression){
    instructions
}

ForEach ($item in get-childitem C:\Users\student\Desktop){
    $item.name    
}


#WHILE LOOP

while(condition){
    instruction
}


#DO WHILE
#will always run at least once

do {
    instructions
}while(condition)


#DO UNTIL
#executes until the condition is false

do {
    instruction
} Until (condition)


$FOR LOOP

for (initialization; condition; increment){
    instructions
}



#FUNCTIONS

function name {
    instructions
}
name

function test-me($value){
    daasdasd
}

test-me 1   #argument of 1


#FUNCTION PARAMETERS
#declare parameters in different place

function test-func {
    param($param1='Default value 1', $param2='Default value 2')
    
    "You entered $param1 and $param2"

}
test-func 1 2

#put [switch] in param to make switch

#make mandatory switch
param(

[Parameter](Mandatory=$true)
    $var
)

#PARAMETER BINDING


#ADVANCED FUNCTIONS
#try to emulate commandlets

function bare-bones {
    [CmdletBinding()]
    Param(
        <Define parameters>
    )
    Begin{
        $var1 = 1
        $var2 = 3
        #init variables
    }
    Process {
        $sum = $var1 + $var2
        #instructions
    }
    End {
        $sum
        #results
    }

}


#ESCAPES

"text `"quotation marks `""

$text1 = "One Terabyte is $(1TB / 1GB) Gigabytes"   #  $() runs command in it

$text = @"      #uses @" "@
instructions stored in variable
multiline
adssdadasd
"@

$text   #runs block of code above

#REGEX
$profile -split '\.'

$profile -split '(?=\.)'    #forward lookahead. look ahead of the .
$profile -split '(?<=.)'    $look behind














